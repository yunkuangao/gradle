package com.yunkuangao.processor

import java.io.BufferedWriter
import java.io.FileNotFoundException
import java.io.IOException
import java.nio.file.NoSuchFileException
import javax.annotation.processing.FilerException
import javax.tools.StandardLocation

class ServiceProviderExtensionStorage(processor: ExtensionAnnotationProcessor) : ExtensionStorage(processor) {

    override fun read(): MutableMap<String, MutableSet<String>> {
        val extensions: MutableMap<String, MutableSet<String>> = mutableMapOf()
        for (extensionPoint in processor.extensions.keys) {
            try {
                val file = getFiler().getResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE + "/" + extensionPoint)
                val entries: MutableSet<String> = HashSet()
                read(file.openReader(true), entries)
                extensions[extensionPoint] = entries
            } catch (e: FileNotFoundException) {
                // doesn't exist, ignore
            } catch (e: NoSuchFileException) {
            } catch (e: FilerException) {
                // re-opening the file for reading or after writing is ignorable
            } catch (e: IOException) {
                error(e.message + "")
            }
        }
        return extensions
    }

    override fun write(extensions: MutableMap<String, MutableSet<String>>) {
        for ((extensionPoint, value) in extensions) {
            try {
                val file = getFiler()!!.createResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE + "/" + extensionPoint)
                BufferedWriter(file.openWriter()).use { writer ->
                    // write header
                    writer.write("# Generated by PF4J") // write header
                    writer.newLine()
                    // write extensions
                    if (value != null) {
                        for (extension in value) {
                            writer.write(extension)
                            if (!isExtensionOld(extensionPoint!!, extension!!)) {
                                writer.write(" # pf4j extension")
                            }
                            writer.newLine()
                        }
                    }
                }
            } catch (e: FileNotFoundException) {
                // it's the first time, create the file
            } catch (e: FilerException) {
                // re-opening the file for reading or after writing is ignorable
            } catch (e: IOException) {
                error(e.toString())
            }
        }
    }

    private fun isExtensionOld(extensionPoint: String, extension: String): Boolean {
        return (processor.oldExtensions.containsKey(extensionPoint)
                && processor.oldExtensions[extensionPoint]!!.contains(extension))
    }

    companion object {
        const val EXTENSIONS_RESOURCE = "META-INF/services"
    }
}