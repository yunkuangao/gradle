package com.yunkuangao.processor

import java.io.BufferedWriter
import java.io.FileNotFoundException
import java.io.IOException
import java.nio.file.NoSuchFileException
import javax.annotation.processing.FilerException
import javax.tools.StandardLocation

class LegacyExtensionStorage(processor: ExtensionAnnotationProcessor) : ExtensionStorage(processor) {

    override fun read(): MutableMap<String, MutableSet<String>> {
        val extensions: MutableMap<String, MutableSet<String>> = HashMap()
        try {
            val file = getFiler()!!.getResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE)
            val entries: MutableSet<String> = HashSet()
            read(file.openReader(true), entries)
            extensions["null"] = entries
        } catch (e: FileNotFoundException) {
            // doesn't exist, ignore
        } catch (e: NoSuchFileException) {
        } catch (e: FilerException) {
            // re-opening the file for reading or after writing is ignorable
        } catch (e: IOException) {
            error(e.message + "")
        }
        return extensions
    }

    override fun write(extensions: MutableMap<String, MutableSet<String>>) {
        try {
            val file = getFiler()!!.createResource(StandardLocation.CLASS_OUTPUT, "", EXTENSIONS_RESOURCE)
            BufferedWriter(file.openWriter()).use { writer ->
                writer.write("# Generated by PF4J") // write header
                writer.newLine()
                for ((_, value) in extensions) {
                    if (value != null) {
                        for (extension in value) {
                            writer.write(extension)
                            writer.newLine()
                        }
                    }
                }
            }
        } catch (e: FileNotFoundException) {
            // it's the first time, create the file
        } catch (e: FilerException) {
            // re-opening the file for reading or after writing is ignorable
        } catch (e: IOException) {
            error(e.toString())
        }
    }

    companion object {
        const val EXTENSIONS_RESOURCE = "META-INF/extensions.idx"
    }
}