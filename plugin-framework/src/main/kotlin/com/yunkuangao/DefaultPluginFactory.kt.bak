package com.yunkuangao

import mu.KotlinLogging
import java.lang.reflect.Modifier
import kotlin.reflect.full.createInstance
import kotlin.reflect.full.primaryConstructor

class DefaultPluginFactory : PluginFactory {

    private val logger = KotlinLogging.logger {}

    override fun create(pluginWrapper: PluginWrapper): Plugin? {
        val pluginClassName: String = pluginWrapper.descriptor.getPluginClass()
        logger.debug("Create instance for plugin '{}'", pluginClassName)
        val pluginClass: Class<*> = try {
            pluginWrapper.pluginClassLoader.loadClass(pluginClassName)
        } catch (e: ClassNotFoundException) {
            logger.error(e.message, e)
            return null
        }

        val modifiers = pluginClass.modifiers
        if (Modifier.isAbstract(modifiers) || Modifier.isInterface(modifiers)
            || pluginClass.kotlin.supertypes[0].toString() != Plugin::class.qualifiedName
//            || !Plugin::class.java.isAssignableFrom(pluginClass)
        ) {
            logger.error("The plugin class '{}' is not valid", pluginClassName)
            return null
        }

        val a = pluginClass::class.constructors
        val d = a.first { it.parameters.size == 1 }.call(pluginWrapper)
        val b = PluginWrapper::class.java

        try {
            val constructor = pluginClass.getDeclaredConstructor(PluginWrapper::class.java)
            return constructor.newInstance(pluginWrapper) as Plugin
        } catch (e: Exception) {
            logger.error(e.message, e)
        }
        return null
    }
}